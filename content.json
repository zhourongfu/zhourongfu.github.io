{"meta":{"title":"AlexZhou","subtitle":"This is Aexl blog","description":"msbgn blog","author":"Rongfu Zhou","url":""},"pages":[{"title":"历程","date":"2016-10-20T11:58:53.000Z","updated":"2016-10-21T11:48:11.598Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"date: 2016-10-20 19:58:55今天是我的hexo博客第一天上线，希望各位多多支持."}],"posts":[{"title":"nginx的编译安装","slug":"nginxbianyi","date":"2016-10-25T10:01:59.552Z","updated":"2016-10-25T10:01:59.541Z","comments":true,"path":"2016/10/25/nginxbianyi/","link":"","permalink":"/2016/10/25/nginxbianyi/","excerpt":"Idina Menze和Caleb Hyles激情对唱Let It Go：","text":"Idina Menze和Caleb Hyles激情对唱Let It Go： 第一部分：在Nginx服务器上分别操作 一、关闭SElinux、配置防火墙1、vi /etc/selinux/config123456#SELINUX=enforcing #注释掉#SELINUXTYPE=targeted #注释掉SELINUX=disabled #增加:wq! #保存退出setenforce 0 #使配置立即生效 2、vi /etc/sysconfig/iptables #编辑1234567-A RH-Firewall-1-INPUT -d 224.0.0.18 -j ACCEPT #允许组播地址通信-A RH-Firewall-1-INPUT -p vrrp -j ACCEPT #允许VRRP（虚拟路由器冗余协）通信-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT #允许80端口通过防火墙:wq! #保存退出 /etc/init.d/iptables restart #重启防火墙使配置生效(或者)service iptables stop 二、安装Nginx 1、安装编译工具包（使用CentOS yum命令安装，安装的包比较多，方便以后配置lnmp环境）1yum install -y make apr* autoconf automake curl curl-devel gcc gcc-c++ gtk+-devel zlib-devel openssl openssl-devel pcre-devel gd kernel keyutils patch perl kernel-headers compat* cpp glibc libgomp libstdc++-devel keyutils-libs-devel libsepol-devel libselinux-devel krb5-devel libXpm* freetype freetype-devel freetype* fontconfig fontconfig-devel libjpeg* libpng* php-common php-gd gettext gettext-devel ncurses* libtool* libxml2 libxml2-devel patch policycoreutils bison 2、下载软件包（1）http://nginx.org/download/nginx-1.9.0.tar.gz #下载Nginx（2）https://sourceforge.net/projects/pcre/files/pcre/8.35/pcre-8.35.tar.gz/download #下载pcre （支持nginx伪静态）上传以上软件包到/usr/local/ 目录 3、安装pcre123456cd /usr/local/srcmkdir /usr/local/pcre #创建安装目录tar -zxvf pcre-8.35.tar.gzcd pcre-8.35./configure --prefix=/usr/local/pcre make &amp;&amp; make install 4、安装Nginx123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130cd /usr/local/groupadd www useradd -g www www -s /bin/false tar -zxvf nginx-1.9.0.tar.gz cd nginx-1.9.0*带参数编译根据自己使用nginx的具体情况安装对应模块*./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail_ssl_module --with-file-aiomake &amp;&amp; make install设置nginx开启启动vi /etc/rc.d/init.d/nginx #编辑启动文件添加下面内容#!/bin/sh## nginx - this script starts and stops the nginx daemin## Comments to support chkconfig on RedHat Linux# chkconfig: 2345 64 36# description: nginx# Comments to support LSB init script conventions### BEGIN INIT INFO# Provides: nginx# Required-Start: $local_fs $network $remote_fs# Should-Start: ypbind nscd ldap ntpd xntpd# Required-Stop: $local_fs $network $remote_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: start and stop nginx### END INIT INFO# Source function library.. /etc/init.d/functionsnginx=&quot;/usr/sbin/nginx &quot;prog=$(basename $nginx)NGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;lockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $&quot;Starting $prog: &quot; daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $&quot;Stopping $prog: &quot; killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop sleep 1 start&#125;reload() &#123; configtest || return $? echo -n $&quot;Reloading $prog: &quot; killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case &quot;$1&quot; in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot; exit 2esac*************************************************************************************************:wq! #保存退出chmod 775 /etc/rc.d/init.d/nginx #赋予文件执行权限chkconfig nginx on #设置开机启动/etc/rc.d/init.d/nginx restart #重新启动Nginxservice nginx restart************************************************************************************************* 三、配置Nginx1cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak #备份nginx配置文件 1、设置nginx运行账1234567891011121314151617vi /etc/nginx/nginx.conf #编辑，修改找到server，在上面一行添加如下内容：server &#123;listen 80 default;server_name _;location / &#123;root html;return 404;&#125;location ~ /.ht &#123;deny all;&#125;&#125;:wq! #保存退出service nginx restart这样设置之后，空主机头访问会直接跳转到nginx404错误页面。 3、添加nginx虚拟主机包含文件12345678910111213141516171819cd /etc/nginx/mkdir vhost vi /etc/nginx/nginx.conf找到上一步添加的代码，在最后添加如下内容：include vhost/*.conf;:wq! #保存退出例如：server &#123;listen 80 default;server_name _;location / &#123;root html;return 404;&#125;location ~ /.ht &#123;deny all;&#125;&#125;include vhost/*.conf; 4、添加Web服务器列表文件123456cd /etc/nginx/ #进入目录 touch mysvrhost.conf #建立文件vi /etc/nginx/nginx.conf #编辑找到上一步添加的代码，在下面添加一行include mysvrhost.conf;:wq! #保存退出 5、设置nginx全局参数1234567891011121314151617181920212223vi /etc/nginx/nginx.confworker_processes 2; # 工作进程数,为CPU的核心数或者两倍events&#123;use epoll; #增加worker_connections 65535; #修改为65535，最大连接数。&#125;********以下代码在http &#123; 部分增加与修改********server_names_hash_bucket_size 128; #增加client_header_buffer_size 32k; #增加large_client_header_buffers 4 32k; #增加client_max_body_size 300m; #增加tcp_nopush on; #修改为onkeepalive_timeout 60; #修改为60tcp_nodelay on; #增加server_tokens off; #增加，不显示nginx版本信息gzip on; #修改为ongzip_min_length 1k; #增加gzip_buffers 4 16k; #增加gzip_http_version 1.1; #增加gzip_comp_level 2; #增加gzip_types text/plain application/x-javascript text/css application/xml; #增加gzip_vary on; #增加 6、设置Web服务器列表1234567cd /etc/nginx #进入目录vi mysvrhost.conf #编辑，添加以下代码upstream osyunweihost &#123;server 192.168.21.127:80 weight=1 max_fails=2 fail_timeout=30s;server 192.168.21.128:80 weight=1 max_fails=2 fail_timeout=30s;ip_hash;&#125; 7、新建虚拟主机配置文件1234567891011121314151617181920212223242526272829```cd /etc/nginx/vhost touch osyunwei.conf #建立虚拟主机配置文件vi osyunwei.conf #编辑log_format access &apos;$remote_addr - $remote_user [$time_local] $request &apos;&apos;&quot;$status&quot; $body_bytes_sent &quot;$http_referer&quot; &apos;&apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;server&#123;listen 80;server_name www.a.com www.b.com;location /&#123;proxy_next_upstream http_502 http_504 error timeout invalid_header;proxy_pass http://osyunweihost;#proxy_redirect off;proxy_set_header Host $host;proxy_set_header X-Forwarded-For $remote_addr;&#125;location /NginxStatus &#123;stub_status on;access_log on;auth_basic &quot;NginxStatus&quot;;######auth_basic_user_file pwd;&#125;access_log /usr/local/nginx/logs/access.log access;&#125;:wq! #保存配置service nginx restart #重启nginx 至此nginx安装配置基本完成","categories":[{"name":"nginx","slug":"nginx","permalink":"/categories/nginx/"}],"tags":[{"name":"科技","slug":"科技","permalink":"/tags/科技/"},{"name":"nginx","slug":"nginx","permalink":"/tags/nginx/"}],"keywords":[{"name":"nginx","slug":"nginx","permalink":"/categories/nginx/"}]},{"title":"nginx的URL重定向功能","slug":"nginxw","date":"2016-10-25T07:21:39.375Z","updated":"2016-10-25T07:21:39.369Z","comments":true,"path":"2016/10/25/nginxw/","link":"","permalink":"/2016/10/25/nginxw/","excerpt":"location 语法:location [=|~|~|^~] /uri/ { … }默认:否这个指令随URL不同而接受不同的结构。你可以配置使用常规字符串和正则表达式。如果使用正则表达式，你必须使用 ~ 前缀选择不区分大小写的匹配或者 ~ 选择区分大小写的匹配。 确定 哪个location 指令匹配一个特定指令，常规字符串第一个测试。常规字符串匹配请求的开始部分并且区分大小写，最明确的匹配将会被使用（查看下文明白 nginx 怎么确定它）。然后正则表达式按照配置文件里的顺序测试。找到第一个比配的正则表达式将停止搜索。如果没有找到匹配的正则表达式，使用常规字符串的结果。 有两个方法修改这个行为。第一个方法是使用 “=”前缀，将只执行严格匹配。如果这个查询匹配，那么将停止搜索并立即处理这个请求。例子：如果经常发生”/”请求，那么使用 “location = /” 将加速处理这个请求。 第二个是使用 ^~ 前缀。如果把这个前缀用于一个常规字符串那么告诉nginx 如果路径匹配那么不测试正则表达式。 而且它重要在于 NGINX 做比较没有 URL 编码，所以如果你有一个 URL 链接’/images/%20/test’ , 那么使用 “images/ /test” 限定location。","text":"location 语法:location [=|~|~|^~] /uri/ { … }默认:否这个指令随URL不同而接受不同的结构。你可以配置使用常规字符串和正则表达式。如果使用正则表达式，你必须使用 ~ 前缀选择不区分大小写的匹配或者 ~ 选择区分大小写的匹配。 确定 哪个location 指令匹配一个特定指令，常规字符串第一个测试。常规字符串匹配请求的开始部分并且区分大小写，最明确的匹配将会被使用（查看下文明白 nginx 怎么确定它）。然后正则表达式按照配置文件里的顺序测试。找到第一个比配的正则表达式将停止搜索。如果没有找到匹配的正则表达式，使用常规字符串的结果。 有两个方法修改这个行为。第一个方法是使用 “=”前缀，将只执行严格匹配。如果这个查询匹配，那么将停止搜索并立即处理这个请求。例子：如果经常发生”/”请求，那么使用 “location = /” 将加速处理这个请求。 第二个是使用 ^~ 前缀。如果把这个前缀用于一个常规字符串那么告诉nginx 如果路径匹配那么不测试正则表达式。 而且它重要在于 NGINX 做比较没有 URL 编码，所以如果你有一个 URL 链接’/images/%20/test’ , 那么使用 “images/ /test” 限定location。总结，指令按下列顺序被接受: = 前缀的指令严格匹配这个查询。如果找到，停止搜索。 剩下的常规字符串，长的在前。如果这个匹配使用 ^~ 前缀，搜索停止。 正则表达式，按配置文件里的顺序。 如果第三步产生匹配，则使用这个结果。否则使用第二步的匹配结果。 例子： location = / {＃ 只匹配 / 查询。[ configuration A ]} location / {#匹配任何查询，因为所有请求都已 / 开头。但是正则表达式规则和长的块规则将被优先和查询匹配。[ configuration B ]} location ^~ /images/ {# 匹配任何已 /images/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。[ configuration C ]} location ~ .(gif|jpg|jpeg)$ {*# 匹配任何已 gif、jpg 或 jpeg 结尾的请求。然而所有 /images/ 目录的请求将使用 Configuration C。[ configuration D ]} 例子请求: / -&gt; configuration A /documents/document.html -&gt; configuration B /images/1.gif -&gt; configuration C /documents/1.jpg -&gt; configuration D 注意：按任意顺序定义这4个配置结果将仍然一样。","categories":[{"name":"nginx","slug":"nginx","permalink":"/categories/nginx/"}],"tags":[{"name":"科技","slug":"科技","permalink":"/tags/科技/"},{"name":"nginx","slug":"nginx","permalink":"/tags/nginx/"}],"keywords":[{"name":"nginx","slug":"nginx","permalink":"/categories/nginx/"}]}]}